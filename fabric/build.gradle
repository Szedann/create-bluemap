plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    // mavens for Create Fabric and dependencies
    maven { url = "https://mvn.devos.one/releases" } // Porting Lib releases
    maven { url = "https://mvn.devos.one/snapshots" } // Create and several dependencies
    maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
    maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven" } // Forge Config API Port

    maven { // Fabric ASM for Porting Lib
        url = "https://jitpack.io/"
        content { includeGroupAndSubgroups("com.github") }
    }

    maven { url = "https://maven.shedaniel.me" } // Cloth Config, REI
    maven { url = "https://maven.blamejared.com" } // JEI
    maven { url = "https://maven.terraformersmc.com/releases" } // Mod Menu, EMI
}

configurations.configureEach {
    resolutionStrategy {
        // make sure the desired version of loader is used. Sometimes old versions are pulled in transitively.
        force("net.fabricmc:fabric-loader:$fabric_loader_version")
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"

    modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')


    modImplementation("net.fabricmc.fabric-api:fabric-api:$fabric_api_version")

    // Create - dependencies are added transitively
    modImplementation("com.simibubi.create:create-fabric-$minecraft_version:$create_fabric_version")

    // Development QOL
    modLocalRuntime("com.terraformersmc:modmenu:$modmenu_version")


    // BlueMap
    modLocalRuntime "maven.modrinth:bluemap:5.3-fabric-1.20"

    modImplementation "me.fzzyhmstrs:fzzy_config:$fzzy_config_version+$minecraft_version"



    // Recipe Viewers - Create Fabric supports JEI, REI, and EMI.
    // See root gradle.properties to choose which to use at runtime.
//    switch (fabric_recipe_viewer.toLowerCase(Locale.ROOT)) {
//        case "jei": modLocalRuntime("mezz.jei:jei-$minecraft_version-fabric:$jei_version"); break
//        case "rei": modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:$rei_version"); break
//        case "emi": modLocalRuntime("dev.emi:emi-fabric:$emi_version"); break
//        case "disabled": break
//        default: println("Unknown recipe viewer specified: $fabric_recipe_viewer. Must be JEI, REI, EMI, or disabled.")
//    }
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
